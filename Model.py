import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.optimizers import Adam


class Model:
    # -*- coding: utf-8 -*-
    """딥러닝.ipynb

    Automatically generated by Colaboratory.

    Original file is located at
        https://colab.research.google.com/drive/1S9Hf_JJDg92Mmyg18OnymUCteAeQqxP1
    """

    # 1. 데이터 준비
    train_data = df['가해운전자 연령'].to_numpy()
    testdata = test_data['가해운전자 연령'].to_numpy()

    # 2. 데이터 전처리
    def preprocess_data(data, seq_length):
        X, y = [], []
        for i in range(len(data) - seq_length):
            X.append(data[i:i + seq_length])
            y.append(data[i + seq_length])
        return np.array(X), np.array(y)

    def predict(self):
        seq_length = 76
        X_train, y_train = preprocess_data(train_data, seq_length)
        X_test, y_test = preprocess_data(testdata, seq_length)

        # 3. LSTM 모델 구축
        model = Sequential()
        model.add(LSTM(152, input_shape=(seq_length, 1), activation='tanh'))
        model.add(Dense(1, activation='linear'))
        optimizer = Adam(learning_rate=0.001)  # 학습률을 0.001로 설정
        model.compile(loss='mean_squared_error', optimizer=optimizer)

        # 4. 모델 학습
        history = model.fit(X_train, y_train, epochs=100, batch_size=76, verbose=1)

        # 5. 손실 함수 그래프
        plt.figure(figsize=(8, 6))
        plt.plot(history.history['loss'])
        plt.title('Loss')
        plt.xlabel('Epoch')
        plt.ylabel('Loss')
        plt.show()

        # 6. 예측 및 그래프 비교
        predicted = model.predict(X_test)
        predicted = np.round(predicted).flatten().astype(int)

        # Test Data Frequency
        unique_test, counts_test = np.unique(testdata, return_counts=True)
        test_data_freq = dict(zip(unique_test, counts_test))

        # Predicted Data Frequency
        unique_pred, counts_pred = np.unique(predicted, return_counts=True)
        pred_data_freq = dict(zip(unique_pred, counts_pred))

        # 예측 그래프와 실제 그래프 동시 비교
        plt.figure(figsize=(8, 6))
        plt.plot(list(test_data_freq.keys()), list(test_data_freq.values()), label='Test Data')
        plt.plot(list(pred_data_freq.keys()), list(pred_data_freq.values()), label='Predicted Data')
        plt.title('Age Frequency Comparison')
        plt.xlabel('age')
        plt.ylabel('Frequency')
        plt.legend()
        plt.show()

        # 예측 데이터만 따로 뽑은 그래프

        plt.figure(figsize=(8, 6))
        plt.plot(list(test_data_freq.keys()), list(test_data_freq.values()), label='Predicted Data')
        plt.title('Age Frequency')
        plt.xlabel('age')
        plt.ylabel('Frequency')
        plt.legend()
        plt.show()

        return plt.show


